<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace RefinedComposite;

/// <summary>
/// This class hold extensions methods that allow to create anonymous composite objects.
/// </summary>
public static class CompositeExtensions
{
<#
	foreach(var i in Enumerable.Range(1, 7))
{
	var composites = Enumerable.Range(1, i).ToArray();
	var generics = string.Join(", ", composites.Select(s=>"TComposite"+s));
	var compositesArg = composites.Take(i-1).ToArray();
	var constraints = string.Join("\n", composites.Select(j=>$"        where TComposite{j} : IComposite<TCore, TComposite{j}>"));
	var argType = i==1 ? "TCore" : "Composition<TCore,"+string.Join(",", compositesArg.Select(s=>"TComposite"+s))+">";
#>
    /// <summary>
<# if(i == 1) { #>
    /// Construct an anonymous composite object.
<# } else { #>
	/// Add another composite on this anonymous composite.
<# } #>
    /// </summary>
    /// <typeparam name="TCore">The core object.</typeparam>
<#= string.Join("\n", composites.Select(s=>$"    /// <typeparam name=\"TComposite{s}\">A composite.</typeparam>")) #>
    /// <param name="arg">The object to use as the core of the anonymous composite.</param>
    /// <returns> A datastructure that hold the core, <paramref name="arg"/> and it's composite together.</returns>
	public static Composition<TCore, <#= generics #>>? Extend<TCore, <#=generics#>>( this <#=argType#> arg )
<#=constraints#>
	{
		var composition = new Composition<TCore, <#= generics #>>(arg<#= i>1 ? ".Core, " :""#><#=string.Join(", ", compositesArg.Select(s=>"arg.Composite"+s))#>, out bool res);
		if(!res) return null;
		return composition;
	}
<# } #>
}
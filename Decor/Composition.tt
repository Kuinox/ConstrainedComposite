<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace RefinedComposite;

<#
foreach(var i in Enumerable.Range(1, 8))
{
	var composites = Enumerable.Range(1, i).Select(s=>"TComposite"+s).ToArray();
#>

public readonly struct Composition<TCore,<#= string.Join(", ", composites)#>>
<#= string.Join("\n", composites.Select(s=>$"    where {s} : IComposite<TCore, {s}>")) #>
	
{
	internal Composition(TCore core,<#= string.Join(", ",composites.Take(i-1).Select((s, i)=>$"{s} composite{i+1}")) + (i > 1 ? "," : "") #> out bool success)
	{
		Core = core;
<#= string.Join("\n", composites.Take(i-1).Select((s,i)=>$"        Composite{i+1} = composite{i+1};")) #>
		success = TComposite<#=i#>.TryCompose(in core, out var temp );
		Composite<#=i#> = temp!;
	}

	internal Composition(TCore core,<#= string.Join(", ",composites.Take(i).Select((s, i)=>$"{s} composite{i+1}")) #>)
	{
		Core = core;
<#= string.Join("\n", composites.Take(i).Select((s,i)=>$"        Composite{i+1} = composite{i+1};")) #>
	}

	public TCore Core { get; }

<#= string.Join("\n", composites.Select((s, i)=>$"    public {s} Composite{i+1} {{ get; }}")) #>
    
    public static implicit operator TCore(Composition<TCore, <#= string.Join(", ", composites) #>> arg) => arg.Core;

<# 
	if(i > 1) {
	foreach(var j in Enumerable.Range(0,i)) {
	var numbers = composites.Select((s,i)=>i+1).Where((s,k) => k!=j).ToArray();
	var downCast = string.Join(", ", numbers.Select(s=>"TComposite"+s));#>
	public static implicit operator Composition<TCore, <#= downCast #>>(Composition<TCore, <#= string.Join(", ", composites)#>> arg) => new(arg.Core, <#= string.Join(", ", numbers.Select(s=>"arg.Composite"+s)) #>);
<# }} #>
}
<#
}
#>
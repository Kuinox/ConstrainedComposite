<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace RefinedComposite;

/// <summary>
/// This class hold extensions methods that allow to refine objects.
/// </summary>
public static class RefineExtensions
{
<#
	foreach(var i in Enumerable.Range(1, 7))
{
	var refines = Enumerable.Range(1, i).ToArray();
	var generics = string.Join(", ", refines.Select(s=>"T"+s));
	var refinesArg = refines.Take(i-1).ToArray();
	var constraints = string.Join("\n", refines.Select(j=>$"        where T{j} : IRefinement<TRefined, T{j}>"));
	var argType = i==1 ? "TRefined" : "Refined<TRefined,"+string.Join(",", refinesArg.Select(s=>"T"+s))+">";
#>
    /// <summary>
<# if(i == 1) { #>
    /// Refine an object type.
<# } else { #>
	/// Apply an additional refinement on this refined object.
<# } #>
    /// </summary>
    /// <typeparam name="TRefined">The <#= i == 1 ? "un" : "" #>refined object.</typeparam>
<#= string.Join("\n", refines.Select(s=>$"    /// <typeparam name=\"T{s}\">A refinement.</typeparam>")) #>
    /// <param name="arg">The object to refine.</param>
    /// <returns> A datastructure that hold <paramref name="arg"/> and it's refinement together.</returns>
	public static Refined<TRefined, <#= generics #>>? Extend<TRefined, <#=generics#>>( this <#=argType#> arg )
<#=constraints#>
	{
		if(!T<#=i#>.TryRefine(arg)) return null;
		return new Refined<TRefined, <#= generics #>>(arg<#= i>1 ? ".Core" :""#>);
	}
<# } #>
}